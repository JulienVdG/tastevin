// Copyright 2019 Splitted-Desktop Systems. All rights reserved
// Copyright 2019 Julien Viard de Galbert
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Gotest process JSON stream generated by `go test -json` or `test2json`.
//
// Usage:
//
//	gotest [go test -json]
//
package main

import (
	"flag"
	"fmt"
	"io"
	"os"
	"path/filepath"

	"github.com/JulienVdG/tastevin/pkg/gotest"
	"github.com/JulienVdG/tastevin/pkg/json2test"
	"github.com/JulienVdG/tastevin/pkg/xio"
)

func usage() {
	fmt.Fprintf(os.Stderr, "usage: gotest [-j file] [go test -json]\n")
	os.Exit(2)
}

var (
	flagJ = flag.String("j", "", "save JSON to `file`")
	flagV = flag.Bool("v", false, "verbose test output (like go test -v)")
	flagS = flag.Bool("s", false, "silent (ie no test output)")
)

func main() {
	flag.Usage = usage
	flag.Parse()
	var c io.WriteCloser

	if !*flagS {
		var h json2test.TestEventHandler
		if *flagV {
			h = json2test.NewVerboseHandler(os.Stdout)
		} else {
			h = json2test.NewSummaryHandler(os.Stdout)
		}

		c = json2test.NewConverter(h)
	}
	if *flagJ != "" {
		dir := filepath.Dir(*flagJ)
		err := os.MkdirAll(dir, 0775)
		if err != nil {
			fmt.Printf("Error creating directory '%s': %v\n", dir, err)
			os.Exit(1)
		}

		f, err := os.Create(*flagJ)
		if err != nil {
			fmt.Printf("Error creating file '%s': %v\n", *flagJ, err)
			os.Exit(1)
		}
		if *flagS {
			c = f
		} else {
			c = xio.MultiWriteCloser(c, f)
		}
	} else if *flagS {
		fmt.Printf("Error -j is required in silent mode\n")
		os.Exit(1)
	}

	if flag.NArg() == 0 {
		io.Copy(c, os.Stdin)
		c.Close()
	} else {
		args := flag.Args()
		err := gotest.Run(c, args)
		if err != nil {
			os.Exit(1)
		}
	}
}
